#BlueJ class context
comment0.target=Board
comment1.params=numStacks\ numDecks
comment1.target=Board(int,\ int)
comment1.text=\n\ \ Sets\ up\ the\ Board\ and\ fills\ the\ stacks\ and\ draw\ pile\ from\ a\ Deck\n\ \ consisting\ of\ numDecks\ Decks.\ \ The\ number\ of\ Cards\ in\ a\ Deck\n\ \ depends\ on\ the\ number\ of\ suits.\ Here\ are\ examples\:\n\ \ \n\ \ \#\ suits\ \ \ \ \ \#\ numDecks\ \ \ \ \ \ \#cards\ in\ overall\ Deck\n\ \ \ \ \ \ 1\ \ \ \ \ \ \ \ \ \ \ \ 1\ \ \ \ \ \ \ \ \ \ 13\ (all\ same\ suit)\n\ \ \ \ \ \ 1\ \ \ \ \ \ \ \ \ \ \ \ 2\ \ \ \ \ \ \ \ \ \ 26\ (all\ same\ suit)\n\ \ \ \ \ \ 2\ \ \ \ \ \ \ \ \ \ \ \ 1\ \ \ \ \ \ \ \ \ \ 26\ (one\ of\ each\ suit)\n\ \ \ \ \ \ 2\ \ \ \ \ \ \ \ \ \ \ \ 2\ \ \ \ \ \ \ \ \ \ 52\ (two\ of\ each\ suit)\n\ \ \ \ \ \ 4\ \ \ \ \ \ \ \ \ \ \ \ 2\ \ \ \ \ \ \ \ \ \ 104\ (two\ of\ each\ suit)\n\ \ \ \ \ \ \n\ \ Once\ the\ overall\ Deck\ is\ built,\ it\ is\ shuffled\ and\ half\ the\ cards\n\ \ are\ placed\ as\ evenly\ as\ possible\ into\ the\ stacks.\ \ The\ other\ half\n\ \ of\ the\ cards\ remain\ in\ the\ draw\ pile.\ \ If\ you'd\ like\ to\ specify\n\ \ more\ than\ one\ suit,\ feel\ free\ to\ add\ to\ the\ parameter\ list.\n
comment10.params=sourceStack
comment10.target=void\ clear(int)
comment10.text=\n\ \ If\ there\ is\ a\ run\ of\ A\ through\ K\ starting\ at\ the\ end\ of\ sourceStack\n\ \ then\ the\ run\ is\ removed\ from\ the\ game\ or\ placed\ into\ a\ completed\n\ \ stacks\ area.\n\ \ \n\ \ If\ there\ is\ not\ a\ run\ of\ A\ through\ K\ starting\ at\ the\ end\ of\ sourceStack\n\ \ then\ an\ invalid\ move\ message\ is\ displayed\ and\ the\ Board\ is\ not\ changed.\n
comment11.params=sourceStack
comment11.target=boolean\ hasFullRun(int)
comment12.params=
comment12.target=void\ printBoard()
comment12.text=\n\ Prints\ the\ board\ to\ the\ terminal\ window\ by\ displaying\ the\ stacks,\ draw\n\ pile,\ and\ done\ stacks\ (if\ you\ chose\ to\ have\ them)\n
comment13.params=
comment13.target=void\ flipUpTopStackCards()
comment14.params=
comment14.target=void\ restart()
comment15.params=
comment15.target=void\ emptyDrawPile()
comment16.params=
comment16.target=void\ emptyStacks()
comment17.params=stackNum
comment17.target=void\ addRun(int)
comment18.params=stackNum
comment18.target=void\ addReverseRun(int)
comment19.params=
comment19.target=void\ revealStacks()
comment2.params=
comment2.target=void\ load()
comment20.params=stackNum
comment20.target=void\ emptyOneStack(int)
comment21.params=stackNum\ numCards
comment21.target=void\ addRandomCards(int,\ int)
comment22.params=stackNum\ numCards
comment22.target=void\ removeCardsFromStack(int,\ int)
comment23.params=stackNum\ numCards
comment23.target=void\ removeTopCardsFromStack(int,\ int)
comment24.params=args
comment24.target=void\ main(java.lang.String[])
comment3.params=
comment3.target=void\ save()
comment4.params=symbol\ src\ dest
comment4.target=void\ makeMove(java.lang.String,\ int,\ int)
comment4.text=\n\ \ Moves\ a\ run\ of\ cards\ from\ src\ to\ dest\ (if\ possible)\ and\ flips\ the\n\ \ next\ card\ if\ one\ is\ available.\ \ Change\ the\ parameter\ list\ to\ match\n\ \ your\ implementation\ of\ Card\ if\ you\ need\ to.\n
comment5.params=src\ symbol
comment5.target=boolean\ hasRun(int,\ java.lang.String)
comment6.params=dest\ symbol
comment6.target=boolean\ isMatch(int,\ java.lang.String)
comment7.params=symbol\ src\ dest
comment7.target=void\ doMove(java.lang.String,\ int,\ int)
comment8.params=
comment8.target=void\ drawCards()
comment8.text=\ \n\ \ Moves\ one\ card\ onto\ each\ stack,\ or\ as\ many\ as\ are\ available\n
comment9.params=
comment9.target=boolean\ isEmpty()
comment9.text=\n\ \ Returns\ true\ if\ all\ stacks\ and\ the\ draw\ pile\ are\ all\ empty\n
numComments=25
